// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file LaserScanPublisher.cpp
 * This file contains the implementation of the publisher functions.
 *
 * This file was generated by the tool fastcdrgen.
 */


#include <fastrtps/participant/Participant.h>
#include <fastrtps/attributes/ParticipantAttributes.h>
#include <fastrtps/publisher/Publisher.h>
#include <fastrtps/attributes/PublisherAttributes.h>

#include <fastrtps/Domain.h>

#include <thread>
#include <chrono>

#include "LaserScanPublisher.h"

#include <array>
#include <math.h>

#include <time.h>
#include <error.h>

using namespace eprosima::fastrtps;
using namespace eprosima::fastrtps::rtps;

LaserScanPublisher::LaserScanPublisher() : mp_participant(nullptr), mp_publisher(nullptr) {}

LaserScanPublisher::~LaserScanPublisher() {	Domain::removeParticipant(mp_participant);}

bool LaserScanPublisher::init()
{
    // Create RTPSParticipant

    ParticipantAttributes PParam;
    PParam.rtps.setName("Participant_publisher");  //You can put here the name you want
    mp_participant = Domain::createParticipant(PParam);
    if(mp_participant == nullptr)
    {
        return false;
    }

    //Register the type

    Domain::registerType(mp_participant, static_cast<TopicDataType*>(&myType));

    // Create Publisher

    PublisherAttributes Wparam;
    Wparam.topic.topicKind = NO_KEY;
    Wparam.topic.topicDataType = myType.getName();  //This type MUST be registered
    Wparam.topic.topicName = "rt/scan"; //"LaserScanPubSubTopic";

    mp_publisher = Domain::createPublisher(mp_participant,Wparam,static_cast<PublisherListener*>(&m_listener));

    if(mp_publisher == nullptr)
    {
        return false;
    }

    std::cout << "Publisher created, waiting for Subscribers." << std::endl;
    return true;
}

void LaserScanPublisher::PubListener::onPublicationMatched(Publisher* pub,MatchingInfo& info)
{
    (void)pub;

    if (info.status == MATCHED_MATCHING)
    {
        n_matched++;
        std::cout << "Publisher matched" << std::endl;
    }
    else
    {
        n_matched--;
        std::cout << "Publisher unmatched" << std::endl;
    }
}

void LaserScanPublisher::run()
{
    while(m_listener.n_matched == 0)
    {
        std::this_thread::sleep_for(std::chrono::milliseconds(250)); // Sleep 250 ms
    }

    // Publication code

    sensor_msgs::msg::LaserScan scan; //st;

    /* Initialize your structure here */

    int msgsent = 0;
    //char ch = 'y';
    int count = 1;
    do
    {
        std::this_thread::sleep_for(std::chrono::milliseconds(500)); // Sleep 1000 ms

        //if(ch == 'y')
        {
            //generate some fake data for our laser scan
            unsigned int num_readings = 100;
            double laser_frequency = 40;
            double ranges[num_readings];
            double intensities[num_readings];
            //int count = 10;
            if (count >10) count = 1;

            for(unsigned int i = 0; i < num_readings; ++i)
            {
                ranges[i] = count;
                intensities[i] = 100 + count;
            }

            struct timespec tv;
            if(clock_gettime(CLOCK_REALTIME, &tv))
                perror("error clock_gettime\n");

            //scan.header().stamp() = ts; //1626519183.590541974; //timer; //scan_time;
            scan.header().stamp().sec() = tv.tv_sec;
            scan.header().stamp().nanosec() = tv.tv_nsec;

            scan.header().frame_id() = "laser_frame";
            scan.angle_min() = -1.57;
            scan.angle_max() = 1.57;
            scan.angle_increment() = 3.14 / num_readings;
            scan.time_increment() = (1 / laser_frequency) / (num_readings);
            scan.range_min() = 0.0;
            scan.range_max() = 100.0;

            scan.ranges().resize(num_readings);
            scan.intensities().resize(num_readings);
            for(unsigned int i = 0; i < num_readings; ++i)
            {
                scan.ranges()[i] = ranges[i];
                scan.intensities()[i] = intensities[i];
            }

            mp_publisher->write(&scan); //(&st);  
            ++msgsent;
            count++;
            std::cout << "Sending sample, count=" << msgsent <<std::endl; // ", send another sample?(y-yes,n-stop): ";
        }

    } while(1); //(std::cin >> ch);
}
